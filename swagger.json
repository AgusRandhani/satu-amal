{
  "openapi": "3.0.1",
  "info": {
    "title": "Satu Amal API Docs",
    "description": "Api collection for satu amal app",
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Notion Docs",
    "url": "https://www.notion.so/Satu-amal-API-Docs-cd4c06a43ea44b1eba53007e15457120"
  },
  "servers": [
    {
      "url": "http://localhost:3333/api"
    }
  ],
  "tags": [
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "All about authentication",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "district",
      "description": "Operations about district",
      "externalDocs": {
        "description": "All operation about district",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "recipient",
      "description": "Operations about recipient",
      "externalDocs": {
        "description": "All operation about recipient",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "file",
      "description": "Operations about file",
      "externalDocs": {
        "description": "All operation about file",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "payment",
      "description": "Operations about payment",
      "externalDocs": {
        "description": "All operation about payment",
        "url": "http://swagger.io"
      }
    }
  ],
  "paths": {
    "/recipients  ": {
      "post": {
        "tags": [
          "recipient"
        ],
        "summary": "Add a new donation recipient (Penanggung Jawab)",
        "operationId": "addDonationRecipient",
        "requestBody": {
          "description": "data that need to be send to the server , data for recipient_district can use id of district from /district endpoint\nto get url for image and video must be preuploaded in /file post endpoint first",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipientBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "get": {
        "tags": [
          "recipient"
        ],
        "summary": "Get donation recipient",
        "description": "Get donation recipient (filterable by status, district, current_donatur, responsible_person, and current_volunteer, past_donatur, past_volunteer, pending_payment_by)",
        "operationId": "getDonationRecipient",
        "parameters": [
          {
            "name": "recipientId",
            "in": "query",
            "description": "recipientId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": false,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "pending_verification",
                  "verified",
                  "donation_received",
                  "package_prepared",
                  "delivering_package",
                  "package_received"
                ]
              }
            }
          },
          {
            "name": "district",
            "in": "query",
            "description": "ID of recipient district",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "current_donatur",
            "in": "query",
            "description": "ID of current donatur",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "past_donatur",
            "in": "query",
            "description": "ID of past donatur",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "responsible_person",
            "in": "query",
            "description": "ID of responsible_person",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "current_volunteer",
            "in": "query",
            "description": "ID of current volunteer",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "past_volunteer",
            "in": "query",
            "description": "ID of past volunteer",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "current_pending_payment_donatur",
            "in": "query",
            "description": "ID of donatur that have pending payment for this recipient",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Recipient"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/recipients/{recipientId}/confirm_registration": {
      "put": {
        "tags": [
          "recipient"
        ],
        "summary": "Confirm registration for new donation recipient (Admin)",
        "operationId": "confirmDonationRecipientRegistration",
        "parameters": [
          {
            "name": "recipientId",
            "in": "path",
            "description": "recipientId that need be confirmed",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/recipients/{recipientId}/add_items": {
      "put": {
        "tags": [
          "recipient"
        ],
        "summary": "Add items for donation recipient",
        "description": "Add items for donation recipient, only donation_received status can add items",
        "operationId": "donationRecipientAddItems",
        "parameters": [
          {
            "name": "recipientId",
            "in": "path",
            "description": "recipientId that need be confirmed",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "data that need to be send to the server",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/recipients/{recipientId}/confirm_package_prepared": {
      "put": {
        "tags": [
          "recipient"
        ],
        "summary": "Confirm package prepared for donation recipient",
        "description": "Confirm package prepared for donation recipient, it can be confirmed if donation item already added",
        "operationId": "donationRecipientPackagePrepared",
        "parameters": [
          {
            "name": "recipientId",
            "in": "path",
            "description": "recipientId that need be confirmed",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "data that need to be send to the server",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttachmentBody"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/recipients/confirm_packages_pickup": {
      "put": {
        "tags": [
          "recipient"
        ],
        "summary": "Confirm if package already being pickup by volunteer",
        "description": "Confirm if package already being pickup by volunteer",
        "operationId": "donationRecipientPackagePickup",
        "parameters": [
          {
            "name": "recipientId",
            "in": "query",
            "description": "recipientIds that need be confirmed",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "requestBody": {
          "description": "data that need to be send to the server",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttachmentBody"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/recipients/{recipientId}/package_received": {
      "put": {
        "tags": [
          "recipient"
        ],
        "summary": "Confirm if package already being received by recipient",
        "description": "Confirm if package already being received by recipient",
        "operationId": "donationRecipientPackageReceived",
        "parameters": [
          {
            "name": "recipientId",
            "in": "path",
            "description": "recipientId that need be confirmed to package_received",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "data that need to be send to the server",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttachmentBody"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/recipients/{recipientId}/latest_report": {
      "get": {
        "tags": [
          "recipient"
        ],
        "summary": "Get latest donation report for this donationId",
        "description": "Get latest donation report for this donationId",
        "operationId": "donationRecipientGetLatestReport",
        "parameters": [
          {
            "name": "recipientId",
            "in": "path",
            "description": "recipientId that need be confirmed",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/recipients/{recipientId}/past_report": {
      "get": {
        "tags": [
          "recipient"
        ],
        "summary": "Get past donation report for this donationId",
        "description": "Get past donation report for this donationId",
        "operationId": "donationRecipientGetPastReport",
        "parameters": [
          {
            "name": "recipientId",
            "in": "path",
            "description": "recipientId that need be confirmed",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/districts": {
      "get": {
        "tags": [
          "district"
        ],
        "summary": "Get all districts",
        "description": "Get all districts",
        "operationId": "districtGet",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/file/uploadFile": {
      "post": {
        "tags": [
          "file"
        ],
        "summary": "uploads file to cloudinary (video/image)",
        "operationId": "uploadFile",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "additionalMetadata": {
                    "type": "string",
                    "description": "Additional data to pass to server"
                  },
                  "file": {
                    "type": "string",
                    "description": "file to upload",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Register user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied",
            "content": {}
          }
        }
      }
    },
    "/user/logout": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/user/profile/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user profile by user id",
        "operationId": "getUserProfileById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user profile",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId that need to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/user/donation-history/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user donation history",
        "operationId": "getUserDonationHistoryById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      }
    },
    "/user/otp": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Verify User OTP",
        "description": "This can only be done by the logged in user.",
        "operationId": "verifyUserOTP",
        "requestBody": {
          "description": "Verify User OTP",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/OTP"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/payments/{recipientId}/unpaid": {
      "post": {
        "tags": [
          "payment"
        ],
        "summary": "Create payment for specific recipient ID (Unpaid)",
        "parameters": [
          {
            "name": "recipientId",
            "in": "path",
            "description": "recipient donation ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Create payment for specific recipient ID (Unpaid). amount and unique code will automatically generated and will fail if recipient has already processed by another user (another user already paid for it)",
        "operationId": "paymentCreate",
        "requestBody": {
          "description": "createUnpaidPaymentBody",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UnpaidPaymentBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessCreateUnpaidPayment"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/payments/{transactionId}/paid": {
      "put": {
        "tags": [
          "payment"
        ],
        "summary": "Confirm payment for specific transactionId by user",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "transactionID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Confirm if transaction created before already being pay by user",
        "operationId": "paymentPaidPut",
        "requestBody": {
          "description": "createPaidPaymentBody",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/paidPaymentBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/payments": {
      "get": {
        "tags": [
          "payment"
        ],
        "summary": "Get All payment that not yet expired (admin only)",
        "parameters": [
          {
            "name": "donationId",
            "in": "query",
            "description": "donationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Get All payment that not yet expired by Admin",
        "operationId": "paymentGet",
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/payments/{transactionId}/verified": {
      "put": {
        "tags": [
          "payment"
        ],
        "summary": "Confirm payment for specific transactionId by admin",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "transactionID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Confirm payment for specific transactionId by admin",
        "operationId": "paymentVerified",
        "requestBody": {
          "description": "createVerifiedPaymentBody",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/paidPaymentBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "schemas": {
      "Payment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "recipientId": {
            "type": "integer"
          },
          "amount": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string"
          },
          "verifiedAt": {
            "type": "string"
          },
          "expiredAt": {
            "type": "string"
          }
        }
      },
      "paidPaymentBody": {
        "type": "object",
        "properties": {
          "attachmentUrl": {
            "type": "string"
          }
        }
      },
      "UnpaidPaymentBody": {
        "type": "object",
        "properties": {
          "methodOfPayment": {
            "type": "string",
            "enum": [
              "gopay",
              "ovo"
            ]
          }
        }
      },
      "SuccessCreateUnpaidPayment": {
        "type": "object",
        "properties": {
          "recipientId": {
            "type": "integer"
          },
          "transactionId": {
            "type": "string"
          },
          "amount": {
            "type": "integer"
          },
          "methodOfPayment": {
            "type": "string",
            "enum": [
              "gopay",
              "ovo"
            ]
          }
        }
      },
      "Item": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "price": {
            "type": "integer"
          }
        }
      },
      "Report": {
        "type": "object",
        "properties": {
          "attachment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          },
          "happened_at": {
            "type": "string"
          },
          "event_type": {
            "type": "string",
            "enum": [
              "pickup",
              "delivered"
            ]
          },
          "volunteer_name": {
            "type": "string"
          }
        }
      },
      "Success": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RecipientBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int64"
          },
          "address": {
            "type": "string"
          },
          "district": {
            "type": "integer",
            "format": "int64",
            "description": "integer value from district api"
          },
          "description": {
            "type": "string"
          },
          "attachment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          }
        }
      },
      "Recipient": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int64"
          },
          "address": {
            "type": "string"
          },
          "district": {
            "type": "integer",
            "format": "int64",
            "description": "integer value from district api"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "current_donatur": {
            "type": "string"
          },
          "current_volunteer": {
            "type": "string"
          },
          "responsible_person": {
            "type": "string"
          },
          "attachment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          }
        }
      },
      "OTP": {
        "type": "object",
        "properties": {
          "otp": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32"
          }
        }
      },
      "UserGet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32"
          },
          "donaturStatus": {
            "type": "string"
          },
          "donationAmount": {
            "type": "integer"
          },
          "donationRecipientCount": {
            "type": "integer"
          },
          "packageCount": {
            "type": "integer"
          },
          "packageRecipientCount": {
            "type": "integer"
          },
          "volunteerStatus": {
            "type": "string"
          },
          "recipientRegisteredCount": {
            "type": "integer"
          },
          "responsiblePersonStatus": {
            "type": "string"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "url": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "image",
              "video"
            ]
          }
        }
      },
      "AttachmentBody": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "image",
              "video"
            ]
          }
        }
      }
    }
  }
}
